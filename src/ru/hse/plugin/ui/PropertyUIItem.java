package ru.hse.plugin.ui;

import com.intellij.ui.DocumentAdapter;
import ru.hse.plugin.core.entities.ComponentEntity;
import ru.hse.plugin.core.entities.PropertyEntity;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PropertyUIItem {
    private JCheckBox checkbox;
    private JPanel panel1;
    PropertyEntity propertyEntity;

    private void activate() {
        if (!checkbox.isSelected()) {
            checkbox.setSelected(true);
        }
    }

    private void deactivate() {
        if (checkbox.isSelected()) {
            checkbox.setSelected(false);
        }
    }

    private JSlider getJSlider() {
        int maxVal = 100;
        double val = Double.parseDouble(propertyEntity.getValue());
        if (val > maxVal) {
            val = 0;
        }
        int[] value = new int[]{(int) val};
        final JSlider jslider = new JSlider(JSlider.HORIZONTAL, 0, maxVal, value[0]);
        jslider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                activate();
                if (jslider.getValue() != value[0]) {
                    value[0] = jslider.getValue();
                    propertyEntity.setValue(jslider.getValue());
                }
            }
        });
        jslider.setMajorTickSpacing(10);
        jslider.setMinorTickSpacing(0);
        jslider.setPaintTicks(true);
        jslider.setPaintLabels(true);
        return jslider;
    }

    private JCheckBox getCheckbox() {
        JCheckBox jCheckBox = new JCheckBox();
        jCheckBox.setSelected(Boolean.parseBoolean(propertyEntity.getValue()));
        jCheckBox.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                activate();
                propertyEntity.setValue(jCheckBox.isSelected());
            }
        });
        return jCheckBox;
    }

    private JTextField getTextField() {
        JTextField jTextField = new JTextField(10);
        jTextField.setText(propertyEntity.getValue());
        jTextField.getDocument().addDocumentListener(new DocumentAdapter() {
            @Override
            protected void textChanged(DocumentEvent documentEvent) {
                if (jTextField.getText().length() == 0) {
                    deactivate();
                } else {
                    activate();
                    propertyEntity.setValue(jTextField.getText());
                }
            }
        });
        return jTextField;
    }

    private JComboBox getCombobox() {
        String[] options = propertyEntity.getEnumOptions();
        JComboBox comboBox = new JComboBox(options);
        for (int i = 0; i < options.length; ++i) {
            if (options[i].equals(propertyEntity.getValue())) {
                comboBox.setSelectedIndex(i);
            }
        }
        comboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                activate();
                propertyEntity.setValue(comboBox.getSelectedItem());
            }
        });
        return comboBox;
    }

    public PropertyUIItem(PropertyEntity propertyEntity) {
        this.propertyEntity = propertyEntity;
        checkbox.setText(propertyEntity.getShortName());
        checkbox.setToolTipText(propertyEntity.getName());
        checkbox.setSelected(propertyEntity.isSelected());
        checkbox.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                propertyEntity.toggle();
            }
        });
        switch (propertyEntity.getType()) {
            case number:
                panel1.add(getJSlider());
                break;
            case bool:
                panel1.add(getCheckbox());
                break;
            case string:
                panel1.add(getTextField());
                break;
            case enumeration:
                panel1.add(getCombobox());
                break;
            default:
                panel1.add(getTextField());
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        checkbox = new JCheckBox();
        checkbox.setHorizontalAlignment(2);
        checkbox.setHorizontalTextPosition(4);
        checkbox.setText("CheckBox");
        panel1.add(checkbox);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
